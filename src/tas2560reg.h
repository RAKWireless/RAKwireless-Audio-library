#ifndef __TAS2560REG_H__
#define __TAS2560REG_H__

#include <arduino.h>
#include <Wire.h>
// #include "tas2560.h"

#define CFG_META_SWITCH (255)
#define CFG_META_DELAY  (254)
#define CFG_META_BURST  (253)

#define TAS25X_PAGE            0x00  //Page Select PAGE (book=0x00 page=0x00 address=0x00) [reset=0h]
#define TAS25X_RESET           0x01  //set 1 to reset chip. Software Reset RESET (book=0x00 page=0x00 address=0x01) [reset=0h]
#define TAS25X_MODE            0x02  //Mode Control MODE (book=0x00 page=0x00 address=0x02) [reset=1h]
#define TAS25X_SPK_CTRL        0x04  //Speaker Control SPK_CTRL (book=0x00 page=0x00 address=0x04) [reset=5Fh]
#define TAS25X_PWR_CTRL_2      0x05  //Power Up Control 2 PWR_CTRL_2 (book=0x00 page=0x00 address=0x05) [reset=0h]
#define TAS25X_PWR_CTRL_1      0x07  //Power Up Control 1 PWR_CTRL_1 (book=0x00 page=0x00 address=0x07) [reset=0h]
#define TAS25X_RAMP_CTRL       0x08  //Class RAMP_CTRL (book=0x00 page=0x00 address=0x08) [reset=1h]
#define TAS25X_EDGE_ISNS_BOOST 0x09  //Edge Rate, Isense Scale, Boost limit EDGE_ISNS_BOOST (book=0x00 page=0x00 address=0x09) [reset=83h]
#define TAS25X_PLL_CLKIN       0x0F  //PLL Clock Input Control PLL_CLKIN (book=0x00 page=0x00 address=0x0F)[reset=41h]
#define TAS25X_PLL_JVAL        0x10  //PLL J Multiplier Control PLL_JVAL (book=0x00 page=0x00 address=0x10) [reset=4h]
#define TAS25X_PLL_DVAL_1      0x11  //PLL Fractional Multiplier D Val MSB PLL_DVAL_1 (book=0x00 page=0x00 address=0x11) [reset=0h]
#define TAS25X_PLL_DVAL_2      0x12  //PLL Fractional Multiplier D Val LSB PLL_DVAL_2 (book=0x00 page=0x00 address=0x12) [reset=0h]
#define TAS25X_ASI_FORMAT      0x14  //ASI Mode Control ASI_FORMAT (book=0x00 page=0x00 address=0x14) [reset=2h]
#define TAS25X_ASI_CHANNEL     0x15  //ASI Channel Control ASI_CHANNEL (book=0x00 page=0x00 address=0x15) [reset=0h]
#define TAS25X_ASI_OFFSET_1    0x16  //ASI Offset ASI_OFFSET_1 (book=0x00 page=0x00 address=0x16) [reset=0h]
#define TAS25X_ASI_OFFSET_2    0x17  //ASI Offset Second Slot ASI_OFFSET_2 (book=0x00 page=0x00 address=0x17) [reset=0h]
#define TAS25X_ASI_CFG_1       0x18  //ASI Configuration ASI_CFG_1 (book=0x00 page=0x00 address=0x18) [reset=0h]
#define TAS25X_ASI_DIV_SRC     0x19  //ASI BDIV Clock Input ASI_DIV_SRC (book=0x00 page=0x00 address=0x19) [reset=0h]
#define TAS25X_ASI_BDIV        0x1A  //ASI BDIV Configuration ASI_BDIV (book=0x00 page=0x00 address=0x1A) [reset=1h]
#define TAS25X_ASI_WDIV        0x1B  //ASI WDIV Configuration ASI_WDIV (book=0x00 page=0x00 address=0x1B) [reset=40h]
#define TAS25X_PDM_CFG         0x1C  //PDM Configuration PDM_CFG (book=0x00 page=0x00 address=0x1C) [reset=0h]
#define TAS25X_PDM_DIV         0x1D  //PDM Divider Configuration PDM_DIV (book=0x00 page=0x00 address=0x1D) [reset=8h]
#define TAS25X_DSD_DIV         0x1E  //DSD Divider Configuration DSD_DIV (book=0x00 page=0x00 address=0x1E) [reset=8h]
#define TAS25X_CLK_ERR_1       0x21  //Clock Error and DSP memory Reload CLK_ERR_1 (book=0x00 page=0x00 address=0x21) [reset=3h]
#define TAS25X_CLK_ERR_2       0x22  //Clock Error Configuration CLK_ERR_2 (book=0x00 page=0x00 address=0x22) [reset=3Fh]
#define TAS25X_IRQ_PIN_CFG     0x23  //Interrupt Pin Configuration IRQ_PIN_CFG (book=0x00 page=0x00 address=0x23) [reset=21h]
#define TAS25X_INT_CFG_1       0x24  //Interrupt Configuration 1 INT_CFG_1 (book=0x00 page=0x00 address=0x24) [reset=0h]
#define TAS25X_INT_CFG_2       0x25  //Interrupt Configuration 2 INT_CFG_2 (book=0x00 page=0x00 address=0x25) [reset=0h]
#define TAS25X_INT_DET_1       0x26  //Interrupt Detected 1 INT_DET_1 (book=0x00 page=0x00 address=0x26) [reset=0h]
#define TAS25X_INT_DET_2       0x27  //Interrupt Detected 2 INT_DET_2 (book=0x00 page=0x00 address=0x27) [reset=0h]
#define TAS25X_STATUS_POWER     0x2A  //Status Block Power STATUS_POWER (book=0x00 page=0x00 address=0x2A) [reset=0h]   This register indicated the operational status of various internal blocks
#define TAS25X_SAR_VBAT_MSB     0x2D  //SAR VBAT Measurement MSB SAR_VBAT_MSB (book=0x00 page=0x00 address=0x2D) [reset=C0h]
#define TAS25X_SAR_VBAT_LSB     0x2E  //SAR VBAT Measurement LSB SAR_VBAT_LSB (book=0x00 page=0x00 address=0x2E) [reset=0h]
#define TAS25X_DIE_TEMP_SENSOR  0x31  //Die Temperature Sensor DIE_TEMP_SENSOR (book=0x00 page=0x00 address=0x31) [reset=0h]
#define TAS25X_LOW_PWR_MODE     0x35  //Low Power Configuration LOW_PWR_MODE (book=0x00 page=0x00 address=0x35) [reset=0h]
#define TAS25X_PCM_RATE         0x36  //PCM Sample Rate PCM_RATE (book=0x00 page=0x00 address=0x36) [reset=32h]
#define TAS25X_CLOCK_ERR_CFG_1  0x4F  //Clock Error Configuration 1 CLOCK_ERR_CFG_1 (book=0x00 page=0x00 address=0x4F) [reset=0h]
#define TAS25X_CLOCK_ERR_CFG_2  0x50  //Clock Error Configuration 2 CLOCK_ERR_CFG_2 (book=0x00 page=0x00 address=0x50) [reset=11h]
#define TAS25X_PROTECTION_CFG_1 0x58  //Class PROTECTION_CFG_1 (book=0x00 page=0x00 address=0x58) [reset=3h] 0x7E CRC_CHECKSUM Checksum CRC_CHECKSUM (book=0x00 page=0x00 address=0x7E) [reset=0h]
#define TAS25X_BOOK             0x7F  //Book Selection BOOK (book=0x00 page=0x00 address=0x7F) [reset=0h

//----------------------------------------------------------------------------------------------------------------
/*ASI PCM Mode ASI_FORMAT[4:2] (ASI_MODE) ASI Function Mode */

#define I2S_MODE        0x0    // I2S Mode(default)         0b00000 
#define DSP_MODE        0x04   // DSP Mode                  0b00100
#define RJF_MODE        0x08   // Right Justified Mode      0b01000
#define LJF_MODE        0x0c   // Left-Justified Mode       0b01100
#define PCM_MODE        0x10   // PCM Mode Mono             0b10000
#define DSP_TS_MODE     0x14   // DSP Time Slot Mode        0b10100

/*ASI PCM Input Word Length  ASI_FORMAT[1:0] (ASI_LENGTH) Word Length */
#define PCM_LEN16       0x0     //16 bits             0b00
#define PCM_LEN20       0x01    //20 bits             0b01
#define PCM_LEN24       0x02    //24 bits (default)   0b10
#define PCM_LEN32       0x03    //32 bits             0b11

/*ASI ASI_CHAN_MODE[1:0] Configures the ASI input stereo channel mode.   */
typedef enum {
   LeftMode  = 0,       //0 = Left Channel
   RightMode = 1,        //1 = Right Channel
   LeftRightMode = 2,    //2 = (Left + Right) / 2
   MonoPCMMode = 3      //3 = monoPCM
}ASI_channel;

typedef unsigned char cfg_u8;

typedef union {
   struct {
    cfg_u8 command;
    cfg_u8 param;
 }; 
} cfg_reg;

extern cfg_reg registers[205];

typedef union 
{   
   struct //bit
   {
      uint8_t bit0   :1;
      uint8_t bit1   :1;
      uint8_t bit2   :1;
      uint8_t bit3   :1;
      uint8_t bit4   :1;
      uint8_t bit5   :1;
      uint8_t bit6   :1;
      uint8_t bit7   :1;
   }Bits;

   uint8_t data;   
}union_reg8;



// cfg_reg registers[205] = {
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x07, 0x41 },
// { CFG_META_DELAY, 0x10 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x07, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x01, 0x01 },
// { CFG_META_DELAY, 0x10 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// // Specify the clock (MCLK/BCLK)
// { 0x0f, 0x01 },
// // PLL P
// { 0x0f, 0x01 },
// // PLL J
// { 0x10, 0x20 },
// // PLL D - MSB 6 bits
// { 0x11, 0x00 },
// // PLL D - LSB 8 bits
// { 0x12, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x00 },
// //decimation and interpolation
// { 0x0d, 0x08 },
// { 0x0e, 0x10 },
// //clock error detection
// { 0x50, 0x31 },
// { 0x04, 0x52 },  //{ 0x04, 0x5f },   //音量调节寄存器
// { 0x15, 0x02 },
// { 0x09, 0x93 }, //{ 0x09, 0x83 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0xfd },
// { 0x36, 0xc0 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x08, 0x01 },
// { 0x36, 0x32 },
// { 0x22, 0x3f },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x49, 0x0c },
// { 0x3c, 0x33 },
// { 0x02, 0x02 },
// { 0x07, 0x41 },
// { CFG_META_DELAY, 0x10 },
// { 0x00, 0x32 },
// { 0x28, 0x7f },
// { 0x29, 0xfb },
// { 0x2a, 0xb5 },
// { 0x2b, 0x00 },
// { 0x2c, 0x80 },
// { 0x2d, 0x04 },
// { 0x2e, 0x4c },
// { 0x2f, 0x00 },
// { 0x30, 0x7f },
// { 0x31, 0xf7 },
// { 0x32, 0x6a },
// { 0x33, 0x00 },
// { 0x1c, 0x7f },
// { 0x1d, 0xff },
// { 0x1e, 0xff },
// { 0x1f, 0xff },
// { 0x20, 0x00 },
// { 0x21, 0x00 },
// { 0x22, 0x00 },
// { 0x23, 0x00 },
// { 0x24, 0x00 },
// { 0x25, 0x00 },
// { 0x26, 0x00 },
// { 0x27, 0x00 },
// { 0x00, 0x33 },
// { 0x18, 0x06 },
// { 0x19, 0x66 },
// { 0x1a, 0x66 },
// { 0x1b, 0x66 },
// { 0x00, 0x34 },
// { 0x34, 0x3a },
// { 0x35, 0x46 },
// { 0x36, 0x74 },
// { 0x37, 0x00 },
// { 0x38, 0x22 },
// { 0x39, 0xf3 },
// { 0x3a, 0x07 },
// { 0x3b, 0x00 },
// { 0x3c, 0x80 },
// { 0x3d, 0x77 },
// { 0x3e, 0x61 },
// { 0x3f, 0x00 },
// { 0x40, 0x22 },
// { 0x41, 0xa7 },
// { 0x42, 0xcc },
// { 0x43, 0x00 },
// { 0x44, 0x3a },
// { 0x45, 0x0c },
// { 0x46, 0x93 },
// { 0x47, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x33 },
// { 0x10, 0x75 },
// { 0x11, 0xc2 },
// { 0x12, 0x8e },
// { 0x13, 0x00 },
// { 0x14, 0x6e },
// { 0x15, 0x14 },
// { 0x16, 0x79 },
// { 0x17, 0x00 },
// { 0x20, 0x1e },
// { 0x21, 0x00 },
// { 0x22, 0x00 },
// { 0x23, 0x00 },
// { 0x24, 0x21 },
// { 0x25, 0x3d },
// { 0x26, 0x71 },
// { 0x27, 0x00 },
// { 0x28, 0x24 },
// { 0x29, 0x7a },
// { 0x2a, 0xe1 },
// { 0x2b, 0x00 },
// { 0x2c, 0x27 },
// { 0x2d, 0xb8 },
// { 0x2e, 0x52 },
// { 0x2f, 0x00 },
// { 0x30, 0x2a },
// { 0x31, 0xf5 },
// { 0x32, 0xc3 },
// { 0x33, 0x00 },
// { 0x34, 0x2e },
// { 0x35, 0x33 },
// { 0x36, 0x33 },
// { 0x37, 0x00 },
// { 0x38, 0x31 },
// { 0x39, 0x70 },
// { 0x3a, 0xa4 },
// { 0x3b, 0x00 },
// { 0x3c, 0x34 },
// { 0x3d, 0xae },
// { 0x3e, 0x14 },
// { 0x3f, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x32 },
// { 0x3c, 0x3d },
// { 0x3d, 0x99 },
// { 0x3e, 0x9a },
// { 0x3f, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x32 },
// { 0x40, 0x30 },
// { 0x41, 0x00 },
// { 0x42, 0x00 },
// { 0x43, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x32 },
// { 0x44, 0x50 },
// { 0x45, 0x00 },
// { 0x46, 0x00 },
// { 0x47, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x32 },
// { 0x4c, 0x02 },
// { 0x4d, 0x00 },
// { 0x4e, 0x00 },
// { 0x4f, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x32 },
// { 0x54, 0x00 },
// { 0x55, 0x88 },
// { 0x56, 0x40 },
// { 0x57, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x32 },
// { 0x58, 0x00 },
// { 0x59, 0x06 },
// { 0x5a, 0xd3 },
// { 0x5b, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x32 },
// { 0x60, 0x28 },
// { 0x61, 0x00 },
// { 0x62, 0x00 },
// { 0x63, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x33 },
// { 0x40, 0x00 },
// { 0x41, 0x00 },
// { 0x42, 0x00 },
// { 0x43, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x00, 0x33 },
// { 0x64, 0x39 },
// { 0x65, 0x80 },
// { 0x66, 0x00 },
// { 0x67, 0x00 },
// { 0x00, 0x00 },
// { 0x7f, 0x00 },
// { 0x07, 0x80 }, //{ 0x07, 0x80 }, //{ 0x07, 0x40 },

// };


#endif /* __TAS2560REG_H__ */
